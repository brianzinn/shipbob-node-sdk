/**
 * ShipBob Developer API
 * ShipBob Developer API Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ShipBobOrdersPresentationViewModelsFulfillmentCenterViewModel } from '../models/ShipBobOrdersPresentationViewModelsFulfillmentCenterViewModel';
import { ShipBobOrdersPresentationViewModelsMeasurementsViewModel } from '../models/ShipBobOrdersPresentationViewModelsMeasurementsViewModel';
import { ShipBobOrdersPresentationViewModelsParentCartonViewModel } from '../models/ShipBobOrdersPresentationViewModelsParentCartonViewModel';
import { ShipBobOrdersPresentationViewModelsRecipientViewModel } from '../models/ShipBobOrdersPresentationViewModelsRecipientViewModel';
import { ShipBobOrdersPresentationViewModelsShipmentProductViewModel } from '../models/ShipBobOrdersPresentationViewModelsShipmentProductViewModel';
import { ShipBobOrdersPresentationViewModelsShipmentsShippingZoneViewModel } from '../models/ShipBobOrdersPresentationViewModelsShipmentsShippingZoneViewModel';
import { ShipBobOrdersPresentationViewModelsStatusDetailViewModel } from '../models/ShipBobOrdersPresentationViewModelsStatusDetailViewModel';
import { ShipBobOrdersPresentationViewModelsTrackingViewModel } from '../models/ShipBobOrdersPresentationViewModelsTrackingViewModel';
import { ShipbobCoreModelsOrderStateResolverOrderStatusEnum } from '../models/ShipbobCoreModelsOrderStateResolverOrderStatusEnum';
import { ShipbobOrdersCommonPackageMaterialType } from '../models/ShipbobOrdersCommonPackageMaterialType';
import { ShipbobOrdersDomainEnumsFulfillmentStatus } from '../models/ShipbobOrdersDomainEnumsFulfillmentStatus';
import { HttpFile } from '../http/http';

export class ShipBobOrdersPresentationViewModelsInternalShipmentViewModel {
    /**
    * Unique store order id of the shipment
    */
    'storeOrderId'?: string | null;
    /**
    * Unique id of the shipment
    */
    'id'?: number;
    /**
    * Id of the order this shipment belongs to
    */
    'orderId'?: number;
    /**
    * Client-defined external unique id of the order this shipment belongs to
    */
    'referenceId'?: string | null;
    'recipient'?: ShipBobOrdersPresentationViewModelsRecipientViewModel;
    /**
    * Date this shipment was created
    */
    'createdDate'?: Date;
    /**
    * Date this shipment was last updated
    */
    'lastUpdateAt'?: Date | null;
    /**
    * Timestamp for the last time this shipment had a tracking update
    */
    'lastTrackingUpdateAt'?: Date | null;
    'status'?: ShipbobCoreModelsOrderStateResolverOrderStatusEnum;
    /**
    * Additional details about the shipment status
    */
    'statusDetails'?: Array<ShipBobOrdersPresentationViewModelsStatusDetailViewModel> | null;
    'location'?: ShipBobOrdersPresentationViewModelsFulfillmentCenterViewModel;
    /**
    * Monetary amount that was invoiced for this shipment
    */
    'invoiceAmount'?: number | null;
    'invoiceCurrencyCode'?: string | null;
    /**
    * Monetary amount that this shipment was insured for
    */
    'insuranceValue'?: number | null;
    /**
    * Name of the shipping option used for this shipment
    */
    'shipOption'?: string | null;
    'packageMaterialType'?: ShipbobOrdersCommonPackageMaterialType;
    'tracking'?: ShipBobOrdersPresentationViewModelsTrackingViewModel;
    /**
    * Information about the products contained in this shipment
    */
    'products'?: Array<ShipBobOrdersPresentationViewModelsShipmentProductViewModel> | null;
    /**
    * Carton information for this shipment
    */
    'parentCartons'?: Array<ShipBobOrdersPresentationViewModelsParentCartonViewModel> | null;
    'measurements'?: ShipBobOrdersPresentationViewModelsMeasurementsViewModel;
    /**
    * If a shipment requires signature
    */
    'requireSignature'?: boolean;
    /**
    * The datetime of ShipBob’s commitment for completing  the shipment and handing to the carrier for delivery.
    */
    'estimatedFulfillmentDate'?: Date | null;
    /**
    * The datetime of ShipBob’s completion of the fulfillment operation as promised.  Currently, this means the shipment has been picked, packed, and label has been printed.
    */
    'actualFulfillmentDate'?: Date | null;
    'estimatedFulfillmentDateStatus'?: ShipbobOrdersDomainEnumsFulfillmentStatus;
    /**
    * Indicates whether the Shipment was marked with tracking information  uploaded to a third-party system where the order originated.
    */
    'isTrackingUploaded'?: boolean;
    /**
    * Gift message associated with the shipment
    */
    'giftMessage'?: string | null;
    /**
    * The datetime of Shipment delivered to customer.
    */
    'deliveryDate'?: Date | null;
    'zone'?: ShipBobOrdersPresentationViewModelsShipmentsShippingZoneViewModel;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "storeOrderId",
            "baseName": "store_order_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "referenceId",
            "baseName": "reference_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "recipient",
            "baseName": "recipient",
            "type": "ShipBobOrdersPresentationViewModelsRecipientViewModel",
            "format": ""
        },
        {
            "name": "createdDate",
            "baseName": "created_date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "lastUpdateAt",
            "baseName": "last_update_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "lastTrackingUpdateAt",
            "baseName": "last_tracking_update_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "ShipbobCoreModelsOrderStateResolverOrderStatusEnum",
            "format": ""
        },
        {
            "name": "statusDetails",
            "baseName": "status_details",
            "type": "Array<ShipBobOrdersPresentationViewModelsStatusDetailViewModel>",
            "format": ""
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "ShipBobOrdersPresentationViewModelsFulfillmentCenterViewModel",
            "format": ""
        },
        {
            "name": "invoiceAmount",
            "baseName": "invoice_amount",
            "type": "number",
            "format": "currency"
        },
        {
            "name": "invoiceCurrencyCode",
            "baseName": "invoice_currency_code",
            "type": "string",
            "format": ""
        },
        {
            "name": "insuranceValue",
            "baseName": "insurance_value",
            "type": "number",
            "format": "currency"
        },
        {
            "name": "shipOption",
            "baseName": "ship_option",
            "type": "string",
            "format": ""
        },
        {
            "name": "packageMaterialType",
            "baseName": "package_material_type",
            "type": "ShipbobOrdersCommonPackageMaterialType",
            "format": ""
        },
        {
            "name": "tracking",
            "baseName": "tracking",
            "type": "ShipBobOrdersPresentationViewModelsTrackingViewModel",
            "format": ""
        },
        {
            "name": "products",
            "baseName": "products",
            "type": "Array<ShipBobOrdersPresentationViewModelsShipmentProductViewModel>",
            "format": ""
        },
        {
            "name": "parentCartons",
            "baseName": "parent_cartons",
            "type": "Array<ShipBobOrdersPresentationViewModelsParentCartonViewModel>",
            "format": ""
        },
        {
            "name": "measurements",
            "baseName": "measurements",
            "type": "ShipBobOrdersPresentationViewModelsMeasurementsViewModel",
            "format": ""
        },
        {
            "name": "requireSignature",
            "baseName": "require_signature",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "estimatedFulfillmentDate",
            "baseName": "estimated_fulfillment_date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "actualFulfillmentDate",
            "baseName": "actual_fulfillment_date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "estimatedFulfillmentDateStatus",
            "baseName": "estimated_fulfillment_date_status",
            "type": "ShipbobOrdersDomainEnumsFulfillmentStatus",
            "format": ""
        },
        {
            "name": "isTrackingUploaded",
            "baseName": "is_tracking_uploaded",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "giftMessage",
            "baseName": "gift_message",
            "type": "string",
            "format": ""
        },
        {
            "name": "deliveryDate",
            "baseName": "delivery_date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "zone",
            "baseName": "zone",
            "type": "ShipBobOrdersPresentationViewModelsShipmentsShippingZoneViewModel",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ShipBobOrdersPresentationViewModelsInternalShipmentViewModel.attributeTypeMap;
    }

    public constructor() {
    }
}


